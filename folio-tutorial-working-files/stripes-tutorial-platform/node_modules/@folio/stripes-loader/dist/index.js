'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _exval = require('exval');

var _exval2 = _interopRequireDefault(_exval);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var exval = new _exval2.default();
// TODO find a simpler/more robust serialisation tool to do "JSON.stringify()
// that leaves functions bare so eval() can regurgitate them eg. when used as
// a Webpack loader"


var appendOrSingleton = function appendOrSingleton(maybeArray, newValue) {
  var singleton = [newValue];
  if (Array.isArray(maybeArray)) return maybeArray.concat(singleton);
  return singleton;
};

// Would use => here but apparently the implicit "this" binding also somehow
// prevents rebinding? I need to bind() this to test it.
module.exports = function stripesLoader() {
  (0, _assert2.default)(_lodash2.default.isObject(this.options.stripesLoader), 'stripes-loader requires an object with the modules to enable as keys at the webpack configuration key "stripesLoader"');
  var enabled = this.options.stripesLoader.modules;
  var output = Object.assign({}, this.options.stripesLoader);
  delete output.modules;
  output.modules = {};
  _lodash2.default.forOwn(enabled, function (overrides, stripe) {
    var packageJSONPath = require.resolve(_path2.default.join(stripe, '/package.json'));
    var packageJSON = JSON.parse(_fs2.default.readFileSync(packageJSONPath));
    (0, _assert2.default)(_lodash2.default.isObject(packageJSON.stripes, 'included module ' + stripe + ' does not have a "stripes" key in package.json'));
    var defaults = packageJSON.stripes;
    (0, _assert2.default)(_lodash2.default.isString(defaults.type, 'included module ' + stripe + ' does not specify stripes.type in package.json'));
    var stripeConfig = Object.assign({}, defaults, overrides, {
      module: stripe,
      // TODO make this async ie. return a promise instead once we can handle that
      // TODO yes, this is silly, but we can't serialize the closure
      getModule: eval('() => require(\'' + stripe + '\').default'), // eslint-disable-line no-eval
      moduleRoot: _path2.default.dirname(packageJSONPath),
      description: packageJSON.description,
      version: packageJSON.version
    });
    delete stripeConfig.type;
    output.modules[defaults.type] = appendOrSingleton(output.modules[defaults.type], stripeConfig);
  });
  return 'module.exports = ' + exval.stringify(output);
};