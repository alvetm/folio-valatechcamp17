/* eslint-disable */

// const encoder = require('./encoder');

// const arr = [1,2,3];
// console.log(encoder.parseObject(arr));

// const obj = Object.assign(new Array(3), { 0: 1, 1: 2, 2: 3 });
// console.log(obj);

// const obj = new Array(3);

// console.log(Object.getOwnPropertyNames(obj));


// class Foo {
//
// }
//
// class Bar extends Foo {
//   test() {
//
//   }
// }
//
// const bar = new Bar;
// console.log(Object.getPrototypeOf(bar));

// const a = {};
// const b = { a };
// clone(a, { b });

// console.log(a, b);

// const aCode = ['{b:', b, '}'];
// const bCode = ['{a:', a, '}'];

// const x = {};
// clone(x, { x });

// console.log(x);

// const xCode = ['{x:', x, '}'];

const s = Symbol('test');
const obj = {
  [s]: 'test1'
};
const obj2 = {};
clone(obj2, obj);

console.log(Object.getOwnPropertyDescriptor(obj2, s));

function clone(t, s) {
  Object.setPrototypeOf(t, Object.getPrototypeOf(s));
  Object.getOwnPropertyNames(s).forEach(name => Object.defineProperty(t, name, Object.getOwnPropertyDescriptor(s, name)));
  Object.getOwnPropertySymbols(s).forEach(name => Object.defineProperty(t, name, Object.getOwnPropertyDescriptor(s, name)));
}


// const acorn = require('acorn');
// // const code = 'class A extends Bar{test() {}} const a = new A';
// const code = 'function A() {}';
// const result = acorn.parse(code);
// console.log(result.body);
// console.log(code.substring(result.body[0].body.start, result.body[0].body.end));


// class Foo {
//   test() {
//
//   }
// }
//
// Foo.abc = 123;
//
// console.log(Foo.name);
// console.log(Object.getOwnPropertyNames(Foo));
